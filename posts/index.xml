<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on leeEhang的个人博客</title>
    <link>/posts/</link>
    <description>Recent content in Posts on leeEhang的个人博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Mon, 21 Jan 2019 14:18:25 +0800</lastBuildDate>
    
	<atom:link href="/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Mac80端口问题</title>
      <link>/posts/mac80%E7%AB%AF%E5%8F%A3%E9%97%AE%E9%A2%98/</link>
      <pubDate>Mon, 21 Jan 2019 14:18:25 +0800</pubDate>
      
      <guid>/posts/mac80%E7%AB%AF%E5%8F%A3%E9%97%AE%E9%A2%98/</guid>
      <description>解除占用 macOS的1024以下端口都是不能直接使用的，如果要用得先排出是否已经有进程使用了某个端口：
# 查看80端口的占用情况 sudo lsof -i &amp;#39;:80&amp;#39; |grep &amp;#39;LISTEN&amp;#39; 获取到pid后kill掉。
代理转发80端口 实际上在我的机器上默认是没有任何进程在使用80端口的，仍需要sudo是因为macOS对1024以下端口的保护。
查阅网上很多资料，都说只能通过将所有访问80端口的请求转发到可用端口（例如8080）。
转发的方法有使用pfctl的，也有用nginx作代理转发的，两种我都试过。考虑到配置的方便(macOS 10以上要处理pfctl没那么容易)，还有对系统的修改，最后决定使用nginx做代理解决。
安装 nginx 首先你要有个nginx，直接brew安装就好，没有brew那就戳这里。
修改nginx配置 默认brew安装好后nginx的配置文件存放在
/usr/local/etc/nginx/nginx.conf 默认是监听8080端口的，改成80后将所有请求proxy_pass到你想要的端口。
server { listen 80; server_name localhost; location / { proxy_pass http://127.0.0.1:8080; # 下面两句如果有用到ws:// websocket的话就加上 proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection &amp;#34;upgrade&amp;#34;; } } nginx的详细配置方式自行官网学习，不能面向互联网搜索编程哦～
启动nginx 因为监听了80端口，启动当然需要sudo
sudo nginx 这样做就能让访问本机80端口的转到8080端口，但，仅限本机访问本机，如果是局域网内其他机器要访问，是会失败的，因为防火墙的存在。
最开始我想着要不关掉防火墙算了，但是存在必定有其道理，想想还是再搜索下折腾下吧，后来找到了一个办法：
sudo nginx -g &amp;#34;daemon off;&amp;#34; 当然啦，这样只运行实在前台运行的，要走到后台那就nohup加&amp;amp;处理下。
开机启动 这种做法是要自己在终端运行的，如果不想每次重开机就做一次就要自己设置开机启动啦。
最简便的方式就是把这个命令写成以脚本，开机执行就是了。可以参考这里</description>
    </item>
    
    <item>
      <title>npm-script中的&amp;&amp;和&amp;一个问题</title>
      <link>/posts/npm-script%E4%B8%AD%E7%9A%84%E5%92%8C%E4%B8%80%E4%B8%AA%E9%97%AE%E9%A2%98/</link>
      <pubDate>Sun, 20 Jan 2019 22:53:31 +0800</pubDate>
      
      <guid>/posts/npm-script%E4%B8%AD%E7%9A%84%E5%92%8C%E4%B8%80%E4%B8%AA%E9%97%AE%E9%A2%98/</guid>
      <description>结论先上 在bash命令/npm script中使用&amp;amp;来实现并发效果时，实际上是把&amp;amp;左侧的命令丢入后台运行，右侧剩余命令看做 整体 任务在前台运行，以此来实现并发效果。
而&amp;amp;&amp;amp;是串行执行两侧命令，先执行完左侧时候再执行右侧。
切记！！！
command1 &amp;amp; command2 &amp;amp;&amp;amp; command3 并不是并发执行command1和command2后再执行command3
而是并发执行command1和command2 &amp;amp;&amp;amp; command3
过程 最近，我组在远端构建组内sdk时踩了个坑！！！原先我们是ci构建好sdk，推送到服务器上，发现经常会出现推过去的zip包文件不全，或者文件全了但是文件的内容不全。很是神奇。
排查一番后发现，我们package.json中的scripts写了个大概如下的命令
cross-env npm run build-core &amp;amp; npm run build-ui 并把这个命令用 npm run build 代替。
嗯~看着没问题，并行的构建sdk-core以及sdk-ui。
构建好后就应该是打包，我们却在ci里面写了个“致命”的命令
npm run build &amp;amp;&amp;amp; node publish.js publish.js就是我们用来发布到的脚本文件。看上去也是没问题。。但是细想一下，整个命令就变成了这样
cross-env npm run build-core &amp;amp; npm run build-ui &amp;amp;&amp;amp; node publish.js 这里就踩到了一个坑！！！！
我们原来是想先并行的构建ui与core，完成后执行上传脚本。。但是这里却变成了并行执行下面两件事
1. 构建core 2. 构建ui和发布 这里我们可以粗略地理解为&amp;amp;&amp;amp;的优先级更高所以导致了这种现象。
但其实是bash中&amp;amp;命令的特殊性导致的，前面我对“并行”做了特殊高亮，是因为表现上是并行的，但是&amp;amp;命令的含义并不是并行的执行任务。
&amp;amp;命令的真实含义是把左侧的任务立即进入后台执行，这样就是实现了&amp;amp;两侧任务同时并发执行的效果，实际上会导致上面说的不符合期望的原因并不是因为优先级问题，按我们的理解&amp;amp;作为运算符的话优先级是高于&amp;amp;&amp;amp;的，之所以会造成上面的原因是因为命令按顺序执行的话，&amp;amp;使得左侧任务瞬间进入后台执行，右侧剩余命令就看做一个整体任务了。
show demo code地址
准备好4个文件index1.js,index2.js,index3.js以及package.json。
内容分别如下
index1.js
console.log(&amp;#39;start index1&amp;#39;); setTimeout(() =&amp;gt; { console.</description>
    </item>
    
    <item>
      <title>前端复习——立即调用函数表达式(IIFE)</title>
      <link>/posts/%E5%89%8D%E7%AB%AF%E5%A4%8D%E4%B9%A0%E7%AB%8B%E5%8D%B3%E8%B0%83%E7%94%A8%E5%87%BD%E6%95%B0%E8%A1%A8%E8%BE%BE%E5%BC%8Fiife/</link>
      <pubDate>Sun, 20 Jan 2019 22:53:31 +0800</pubDate>
      
      <guid>/posts/%E5%89%8D%E7%AB%AF%E5%A4%8D%E4%B9%A0%E7%AB%8B%E5%8D%B3%E8%B0%83%E7%94%A8%E5%87%BD%E6%95%B0%E8%A1%A8%E8%BE%BE%E5%BC%8Fiife/</guid>
      <description>概念理解 所谓立即执行函数表达式就是用来表达一个可以立即执行的函数的式子。
一个函数只要声明后显式写上调用语句即可立即执行。
如:
function fool(){} fool();  便是一个立即执行的函数了。
但它并不是一个IIFE，因为它只是声明语句+表达式(函数低调用)而不是单纯一个表达式。
表达式的概念戳这里。
温习了什么是表达式之后可能会写出这样的代码:
function foo(){}() //Uncaught SyntaxError: Unexpected token )  或
function(){}() // Uncaught SyntaxError: Unexpected token (  这两种都会报错的，第一种可以看作是函数声明后执行()，固然是报错的，因为圆括号里面需要有表达式。 而第二种错的原因是直接使用书写一个匿名函数的话，js引擎会当作声明语句，而函数声明语句要求一定要有函数名。
也许会想到可以这样写
var foo = function(){}()  确实不会报错，但依旧这不是一个表达式。 实际上这里是吧function(){}当作左值表达式了，赋值后再调用。
也就是说只要保证fucntion(){}能够被js引擎当作表达式来处理而不是声明语句就没问题。 正如前面说到()里面必须是表达式，那如下代码是不是就不会报错？
(function(){})  的确是不报错的，这里的意思其实就是表达一个匿名函数，当然，具名也是可以的，但没必要占用全局命名空间。
上面也说了，函数调用也是个表达式，所以我们组合一下
( function(){}() )  以及
( function(){} )()  两种都是IIFE。
其实我们的目的就是让函数声明变成一个表达式，然后调用这个表达式所表达的值，让函数变成表达式的方式其实不止()，组合上逻辑运算符、赋值等：
var i = function(){ return 10; }(); true &amp;amp;&amp;amp; function(){ /* code */ }(); 0, function(){ /* code */ }(); -function(){ /* code */ }(); +function(){ /* code */ }();  都能让函数声明变成表达式，但都有一些副作用，相比下()是相对较好的了。</description>
    </item>
    
  </channel>
</rss>